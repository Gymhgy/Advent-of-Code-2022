#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!csharp

#r "../AOCUtils/AOCUtils/bin/Release/net6.0/AOCUtils.dll"
using AOCUtils;
using System.IO;
using System.Linq;
using System;
using System.Text.RegularExpressions;

string input = File.ReadAllText("day17.txt");

#!csharp

List<int[]> cave = new();
cave.Add(new[] { 2,2,2,2,2,2,2 });
var rocks = new[] {

    new List<int[]> {
        new[]{ 0,0,1,1,1,1,0 },

    },
    new List<int[]> {
        new[]{ 0,0,0,1,0,0,0 },
        new[]{ 0,0,1,1,1,0,0 },    
        new[]{ 0,0,0,1,0,0,0 },

    },
    new List<int[]> {
        new[]{ 0,0,0,0,1,0,0 },
        new[]{ 0,0,0,0,1,0,0 },    
        new[]{ 0,0,1,1,1,0,0 },

    },
    new List<int[]> {
        new[]{ 0,0,1,0,0,0,0 },
        new[]{ 0,0,1,0,0,0,0 },
        new[]{ 0,0,1,0,0,0,0 },    
        new[]{ 0,0,1,0,0,0,0 },

    },
    new List<int[]> {
        new[]{ 0,0,1,1,0,0,0 },    
        new[]{ 0,0,1,1,0,0,0 },
    },
};
var height = new[] {1, 3, 3, 4, 2};

void P() {
    for(int j = cave.Count - 1; j >= 0; j--) {
        if(j == 0) Console.WriteLine("-------"); else
        Console.WriteLine(string.Concat(cave[j]).Replace("0", ".").Replace("2", "#"));
    }
    Console.WriteLine();
}

#!csharp

int i = 0;
int c = 0;
for(; i < 2022; i++) {

    int h = cave.Count+3;
    var r = rocks[i % 5].Reverse<int[]>().Select(x=>x.ToArray()).ToList();
    while(true) {
        var rr = r.Select(x=>x.ToArray()).ToList();
        if(input[c++ % input.Length] == '>') {
            for(int j = 0; j < r.Count; j++) {
                if(rr[j][6] == 1) goto down;
                for(int q = 6; q > 0; q--) {
                    rr[j][q] = rr[j][q-1];
                    if(h + j < cave.Count && cave[h + j][q] - rr[j][q] == 1) {
                        goto down;

                    }

                }
                rr[j][0] = 0;
            }
        }
        else {
            for(int j = 0; j < r.Count; j++) {
                if(rr[j][0] == 1) goto down;
                for(int q = 0; q < 6; q++) {
                    rr[j][q] = rr[j][q+1];
                    if(h + j < cave.Count && cave[h + j][q] - rr[j][q] == 1) {
                        goto down;
                    }
                }
                rr[j][6] = 0;

            }
        }
        r = rr;
        down:
        h--;

        for(int j = 0; j < r.Count; j++) {
            for(int q = 0; q < 7; q++) {
                if(h + j < cave.Count && cave[h + j][q] - r[j][q] == 1) {
                    h++;
                    goto finish;
                }
            }
        }
    }
    finish:
    //if(i < 11) P();

        for(int j = 0; j < height[i%5]; j++) {
        if(h + j >= cave.Count) cave.Add(r[j].Select(x => x*2).ToArray());
        else{
            for(int q = 0 ; q < 7; q++) {
                cave[h + j][q] += r[j][q]*2;
            }
        }
        }
        
}
cave.Count-1

#!csharp

List<int[]> cave = new();
cave.Add(new[] { 2,2,2,2,2,2,2 });
long i = 0;
int c = 0;
long jump = 0;
Dictionary<(long, int), List<(int, long)>> hs = new();
bool jumped = false;
//1000000000000
for(; i < 1000000000000; i++) {
    int h = cave.Count+3;
    var r = rocks[i % 5].Reverse<int[]>().Select(x=>x.ToArray()).ToList();

//    if((i%5, c%input.Length) == (0,482%input.Length)) (i,c, cave.Count).F();


    while(true) {
        var rr = r.Select(x=>x.ToArray()).ToList();
        if(input[c++ % input.Length] == '>') {
            for(int j = 0; j < r.Count; j++) {
                if(rr[j][6] == 1) goto down;
                for(int q = 6; q > 0; q--) {
                    rr[j][q] = rr[j][q-1];
                    if(h + j < cave.Count && cave[h + j][q] - rr[j][q] == 1) {
                        goto down;

                    }

                }
                rr[j][0] = 0;
            }
        }
        else {
            for(int j = 0; j < r.Count; j++) {
                if(rr[j][0] == 1) goto down;
                for(int q = 0; q < 6; q++) {
                    rr[j][q] = rr[j][q+1];
                    if(h + j < cave.Count && cave[h + j][q] - rr[j][q] == 1) {
                        goto down;
                    }
                }
                rr[j][6] = 0;

            }
        }
        r = rr;
        down:
        h--;

        for(int j = 0; j < r.Count; j++) {
            for(int q = 0; q < 7; q++) {
                if(h + j < cave.Count && cave[h + j][q] - r[j][q] == 1) {
                    h++;
                    goto finish;
                }
            }
        }
    }
    finish:
    //if(i < 11) P();

        for(int j = 0; j < height[i%5]; j++) {
        if(h + j >= cave.Count) cave.Add(r[j].Select(x => x*2).ToArray());
        else{
            for(int q = 0 ; q < 7; q++) {
                cave[h + j][q] += r[j][q]*2;
            }

        }
        }
    if(!jumped){
        if(!hs.ContainsKey((i % 5, c % input.Length)))
            hs[(i%5, c%input.Length)] = new List<(int, long)>{(cave.Count, i) };
        else {
            hs[(i%5, c%input.Length)].Add((cave.Count, i));
        }
        var col = hs[(i%5, c%input.Length)];
        if(col.Count >= 3) {
            var dh1 = col[^1].Item1 - col[^2].Item1;
            var dh2 = col[^2].Item1 - col[^3].Item1;
            if(dh1 == dh2) {
                long diff = col[^1].Item2 - col[^2].Item2;
                long cycles = (1000000000000 - i) / diff;
                (i, c, dh1, cycles, cycles * diff).F();
                i += cycles * diff;
                jump += cycles * dh1;
                jumped = true;
            }
        }
    }
        
}
cave.Count-1 + jump
